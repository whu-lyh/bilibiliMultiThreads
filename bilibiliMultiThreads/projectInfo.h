#pragma once
//2019年9月21日15点46分
//1.并发，进程，线程的基本概念和综述
	//并发
	/*

		两个或者更多的任务（独立的活动）同时发生（进行）：一个程序同时执行多个独立的任务；
		单核CPU：操作系统调度，每秒钟进行任务切换
		这是并发的假象，这种上下文切换时需要时间开销的，系统要保存切换时的各种状态

	多核CPU：（硬件并发）

	进程：就是可执行程序运行起来就叫创建了一个进程

	线程：每个进程都有一个主线程（这个系统自己创建的），这个主线程是唯一的，一个进程中只有一个主线程
	Crtl+F5是主线程调用main函数中的代码，线程是依存于进程的，线程是执行代码的。线程随着进程默默地启动并运行，主线程结束，则该进程结束

		若创建了新的线程，则可以再不同的路径上做别的事情，但是线程并不是越多越好，每个线程都需要独立的堆栈空间（1M）

	多进程并发
		进程之间的通信（同一个电脑上，管道，文件，消息队列，共享内存）
					  （不同电脑上：socket通信技术）
	多线程并发
		共享内存 //全局变量，指针，引用，都可以再线程之间进行传递，使用多线程开销远远小于多进程
		带来的问题：
		数据一致性问题，写文件

	这个项目中仅涉及到多线程并发，多进程并发需要学习专门的东西。
	线程启动速度快；系统资源开销少；共享内存通信方式比其他快。
		以往的多线程代码不能跨平台，windows，CreateThread()
		linux：：pthread_create()
		pthread跨平台，但是windows下需要进行一些配置
		c++11本身支持了多线程
*/